package ctdsCompiler;

import java_cup.runtime.*;
import java.io.FileReader;
import ir.ast.*;
import ir.semcheck.*;
import java.util.Hashtable;

action code {:
    Hashtable symbolTable = new Hashtable();	// Tabla de símbolos que permite el mapeo de identificadores en valores
:};

parser code {:
    
:};

/* ------------ Area de declaracion de Terminales y No Terminales ----------- */


/* Terminales (tokens retornados por el Lexer)		*
 * Primero se listan los terminales que no tienen valor *
 * Luego se listan los que si tiene valor 		*/
terminal COMA, SEMICOLON, BOOL, BREAK, CLASS, CONTINUE, ELSE, EXTERN, FLOAT, FOR, IF, INTEGER, RETURN, VOID, WHILE, ASSIGN, PLUSASSIGN, SUBASSIGN, PLUS, MINUS, MULT, DIV, MOD, LESS, GREATER, LESSEQUAL, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR, NOT, LPAREN, RPAREN, LSQBRACKET, RSQBRACKET, LBRACES, RBRACES, POINT, UMINUS;
terminal String INTLIT;
terminal Float FLOATLIT;
terminal String ID;
terminal Boolean BOOLLIT;

/* No terminales usados en el area de la gramatica	 	*
 * Primero se listan los no terminales que tienen valor Object  */

non terminal program, class_decl, field_decl, method_decl, body, block, location, method_call, expr, statement, point_id_list, expr_list, type_list, field_list, statement_list, method_list, id_list, id_name;


/* ------------- Area de precedencia y asociatividad de los operadores ----------- */

/* Definir la precedencia aquí permite no preocuparse por la	 *
 * precedencia en el area de Gramatica. Los operadores se listan *
 * de arriba hacia abajo en orden de precedencia ascendente.	 */

precedence right ASSIGN, PLUSASSIGN, SUBASSIGN;
precedence left OR;
precedence left AND;
precedence right NOT;
precedence left EQUAL, NOTEQUAL;
precedence left LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right UMINUS;
precedence left BOOL,INTEGER,FLOAT,VOID,ID,ELSE;


/* ---------------------------- Area de Gramatica -------------------- */

start with program;	// Especifica que el simbolo de comienzo es el no terminal program
    
program ::= class_decl
          | class_decl program
	  ;
	  

class_decl ::= CLASS ID LBRACES RBRACES
	    | CLASS ID LBRACES field_list method_list RBRACES 
	    | CLASS ID LBRACES method_list RBRACES 
            | CLASS ID LBRACES field_list RBRACES 
	    ;
	    
field_list ::= field_decl
            | field_list field_decl
	    ;


method_list::= method_decl
            | method_list method_decl
            ;
      	    
field_decl ::= INTEGER id_list SEMICOLON 
	     | FLOAT id_list SEMICOLON
	     | BOOL id_list SEMICOLON
	     | ID id_list SEMICOLON
	     | VOID id_list SEMICOLON
             ;
            
id_list ::= id_name
          | id_list COMA id_name
          ;

id_name ::= ID
          | ID LSQBRACKET INTLIT RSQBRACKET
          ;
            
method_decl ::= INTEGER ID LPAREN RPAREN body
	      | FLOAT ID LPAREN RPAREN body
	      | BOOL ID LPAREN RPAREN body
	      | ID ID LPAREN RPAREN body
	      | VOID ID LPAREN RPAREN body
	      | INTEGER ID LPAREN type_list RPAREN body
	      | FLOAT ID LPAREN type_list RPAREN body
	      | BOOL ID LPAREN type_list RPAREN body
	      | ID ID LPAREN type_list RPAREN body
	      | VOID ID LPAREN type_list RPAREN body
              ; 

type_list ::= INTEGER ID 
	    | FLOAT ID
	    | BOOL ID
	    | ID ID
	    | VOID ID
	    | type_list COMA INTEGER ID
	    | type_list COMA FLOAT ID
	    | type_list COMA BOOL ID
	    | type_list COMA ID ID       
	    | type_list COMA VOID ID         
	    ;
                  
body ::= block
       | EXTERN SEMICOLON
       ;
	     
block ::= LBRACES RBRACES
        | LBRACES field_list RBRACES
	| LBRACES statement_list RBRACES
	| LBRACES field_list statement_list RBRACES
	;
	
statement_list ::= statement
                 | statement_list statement
		 ;	
	
statement ::= location:l ASSIGN expr:e SEMICOLON			{: RESULT = new AssignStmt((Location) l, AssignOpType.ASSIGN, (Expression) e); :}
	    | location:l PLUSASSIGN expr:e SEMICOLON			{: RESULT = new AssignStmt((Location) l, AssignOpType.INCREMENT, (Expression) e); :}
	    | location:l SUBASSIGN expr:e SEMICOLON			{: RESULT = new AssignStmt((Location) l, AssignOpType.DECREMENT, (Expression) e); :}
	    | method_call SEMICOLON
	    | IF LPAREN expr:c RPAREN statement:t			{: RESULT = new IfStmt((Expression) c, (Block) t); :}
	    | IF LPAREN expr:c RPAREN statement:t ELSE statement:f	{: RESULT = new IfStmt((Expression) c, (Block) t, (Block) f); :}
	    | FOR ID ASSIGN expr COMA expr statement
	    | WHILE expr statement
	    | RETURN SEMICOLON						{: RESULT = new ReturnStmt(); :}
	    | RETURN expr:e SEMICOLON					{: RESULT = new ReturnStmt((Expression) e); :}
	    | BREAK SEMICOLON
	    | CONTINUE SEMICOLON
	    | SEMICOLON
	    | block
	    ;
	    
method_call ::= ID LPAREN RPAREN
	      |ID LPAREN expr_list RPAREN
	      |ID point_id_list LPAREN RPAREN
	      |ID point_id_list LPAREN expr_list RPAREN
	      ;
	      
      
expr_list ::= expr
            | expr_list COMA expr  
            ;	      

point_id_list ::= POINT ID
		| point_id_list POINT ID
		;

location ::= ID point_id_list LSQBRACKET expr RSQBRACKET 
	   | ID LSQBRACKET expr RSQBRACKET
	   | ID point_id_list
	   | ID
           ;  
           
expr ::= location
       | method_call
       | INTLIT:i			{: RESULT = new IntLiteral(i); :}
       | FLOATLIT			// Debemos definir FloatLiteral?
       | BOOLLIT			// Debemos definir BooleanLiteral?
       | expr:e1 PLUS expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.PLUS, (Expression) e2); :}
       | expr:e1 MINUS expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.MINUS, (Expression) e2); :}
       | expr:e1 MULT expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.MULTIPLY, (Expression) e2); :}
       | expr:e1 DIV expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.DIVIDE, (Expression) e2); :}
       | expr:e1 MOD expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.MOD, (Expression) e2); :}
       | expr:e1 LESS expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.LE, (Expression) e2); :}
       | expr:e1 GREATER expr:e2	{: RESULT = new BinOpExpr((Expression) e1, BinOpType.GE, (Expression) e2); :}
       | expr:e1 LESSEQUAL expr:e2	{: RESULT = new BinOpExpr((Expression) e1, BinOpType.LEQ, (Expression) e2); :}
       | expr:e1 GREATEREQUAL expr:e2	{: RESULT = new BinOpExpr((Expression) e1, BinOpType.GEQ, (Expression) e2); :}
       | expr:e1 EQUAL expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.CEQ, (Expression) e2); :}
       | expr:e1 NOTEQUAL expr:e2	{: RESULT = new BinOpExpr((Expression) e1, BinOpType.NEQ, (Expression) e2); :}
       | expr:e1 AND expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.AND, (Expression) e2); :}
       | expr:e1 OR expr:e2		{: RESULT = new BinOpExpr((Expression) e1, BinOpType.OR, (Expression) e2); :}
       | MINUS expr %prec UMINUS
       | NOT expr 
       | LPAREN expr:e RPAREN		{: RESULT = (Expression) e; :}
       ;