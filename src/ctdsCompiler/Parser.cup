package ctdsCompiler;

import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
    
:};

/* ------------ Area de declaracion de Terminales y No Terminales ----------- */


/* Terminales (tokens retornados por el Lexer)		*
 * Primero se listan los terminales que no tienen valor *
 * Luego se listan los que si tiene valor 		*/
terminal BOOL, BREAK, CLASS, CONTINUE, ELSE, EXTERN, FLOAT, FOR, IF, INTEGER, RETURN, VOID, WHILE, ASSIGN, PLUSASSIGN, SUBASSIGN, PLUS, SUB, MULT, DIV, MOD, LESS, GREATER, LESSEQUAL, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR, NOT, LPAREN, RPAREN, LSQBRACKET, RSQBRACKET, LBRACES, RBRACES;
terminal Integer DIGIT, INTLIT;
terminal Float FLOATLIT;
terminal String ALPHANUM,ID;
terminal Boolean BOOLLIT;

/* No terminales usados en el area de la gramatica	 	*
 * Primero se listan los no terminales que tienen valor Object  */

non terminal program, class_decl, field_decl, method_decl, body, block, location, method_call, expr;


/* ------------- Area de precedencia y asociatividad de los operadores ----------- */

/* Definir la precedencia aqu√≠ permite no preocuparse por la	 *
 * precedencia en el area de Gramatica. Los operadores se listan *
 * de arriba hacia abajo en orden de precedencia descendente.	 */

precedence left MULT, DIV, MOD;
precedence left PLUS, SUB;
precedence left LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence left EQUAL, NOTEQUAL;
precedence right NOT;
precedence left AND;
precedence left OR;
precedence right ASSIGN, PLUSASSIGN, SUBASSIGN;


/* ---------------------------- Area de Gramatica -------------------- */

statament ::= location ASSIGN expr
	    | location PLUSASSIGN expr
	    | location SUBASSIGN expr
	    | method_call
	    | IF LPAREN expr RPAREN statement
	    | IF LPAREN expr RPAREN statement ELSE statement
	    | RETURN
	    | RETURN expr
	    | BREAK 
	    | CONTINUE
	    

method_call ::= ID 
        
expr ::= location
       | INTLIT
       | FLOATLIT
       | BOOLLIT
       | expr PLUS expr
       | expr SUB expr
       | expr MULT expr
       | expr DIV expr
       | expr MOD expr
       | expr LESS expr
       | expr GREATER expr
       | expr LESSEQUAL expr
       | expr GREATEREQUAL expr
       | expr EQUAL expr
       | expr NOTEQUAL expr
       | expr AND expr
       | expr OR expr
       | NOT expr 
       | LPAREN expr RPAREN
       | DIGIT PLUS DIGIT
    ;
        
location ::= ID
	   | ID LQBRACKET expr RQBRACKET
	   ;