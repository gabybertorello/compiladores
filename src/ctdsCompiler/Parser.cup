package ctdsCompiler;

import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
    
:};

/* ------------ Area de declaracion de Terminales y No Terminales ----------- */


/* Terminales (tokens retornados por el Lexer)		*
 * Primero se listan los terminales que no tienen valor *
 * Luego se listan los que si tiene valor 		*/
terminal COMA, SEMICOLON, BOOL, BREAK, CLASS, CONTINUE, ELSE, EXTERN, FLOAT, FOR, IF, INTEGER, RETURN, VOID, WHILE, ASSIGN, PLUSASSIGN, SUBASSIGN, PLUS, SUB, MULT, DIV, MOD, LESS, GREATER, LESSEQUAL, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR, NOT, LPAREN, RPAREN, LSQBRACKET, RSQBRACKET, LBRACES, RBRACES, POINT;
terminal Integer DIGIT, INTLIT;
terminal Float FLOATLIT;
terminal String ALPHANUM,ID;
terminal Boolean BOOLLIT;

/* No terminales usados en el area de la gramatica	 	*
 * Primero se listan los no terminales que tienen valor Object  */

non terminal program, class_decl, field_decl, method_decl, body, block, location, method_call, expr, statement, point_id_list, expr_list,type_list,field_list,statement_list,method_list, id_list, id_name;


/* ------------- Area de precedencia y asociatividad de los operadores ----------- */

/* Definir la precedencia aqu√≠ permite no preocuparse por la	 *
 * precedencia en el area de Gramatica. Los operadores se listan *
 * de arriba hacia abajo en orden de precedencia descendente.	 */

precedence left MULT, DIV, MOD;
precedence left PLUS, SUB;
precedence left LESS, GREATER, LESSEQUAL, GREATEREQUAL;
precedence left EQUAL, NOTEQUAL;
precedence right NOT;
precedence left AND;
precedence left OR;
precedence right ASSIGN, PLUSASSIGN, SUBASSIGN;
precedence left BOOL,INTEGER,FLOAT,VOID,ID,ELSE;

/* ---------------------------- Area de Gramatica -------------------- */

    
program ::= class_decl
          | class_decl program
	  ;
	  

class_decl ::= CLASS ID LBRACES RBRACES
	    | CLASS ID LBRACES field_list method_list RBRACES {: System.out.println("entro ambos");:}
	    | CLASS ID LBRACES method_list RBRACES {: System.out.println("entro solo metodos");:}
            | CLASS ID LBRACES field_list RBRACES {: System.out.println("entro solo atributos");:}
	    ;
field_list ::= field_decl
            | field_list field_decl
        ;


method_list::= method_decl
            | method_list method_decl
            ;
      	    
	    
field_decl ::= INTEGER id_list SEMICOLON {: System.out.println("atr enteros");:}
	     | FLOAT id_list SEMICOLON
	     | BOOL id_list SEMICOLON
	     | ID id_list SEMICOLON
	     | VOID id_list SEMICOLON
             ;
            
id_list ::= id_name
          | id_list COMA id_name
          ;

id_name ::= ID
          | ID LSQBRACKET INTLIT RSQBRACKET
          ;
            
method_decl ::= INTEGER ID LPAREN RPAREN body
	     | FLOAT ID LPAREN RPAREN body
	     | BOOL ID LPAREN RPAREN body
	     | ID ID LPAREN RPAREN body
	     | VOID ID LPAREN RPAREN body
	     | INTEGER ID LPAREN type_list RPAREN body
	     | FLOAT ID LPAREN type_list RPAREN body
	     | BOOL ID LPAREN type_list RPAREN body
	     | ID ID LPAREN type_list RPAREN body
	     | VOID ID LPAREN type_list RPAREN body
             ; 

type_list ::= INTEGER ID 
       | FLOAT ID
       | BOOL ID
       | ID ID
       | VOID ID
       | type_list COMA INTEGER ID
       | type_list COMA FLOAT ID
       | type_list COMA BOOL ID
       | type_list COMA ID ID       
       | type_list COMA VOID ID         
       ;
                 
             
body ::= block
       | EXTERN SEMICOLON
       ;
	     
block ::= LBRACES RBRACES
        | LBRACES field_list RBRACES
	| LBRACES statement_list RBRACES
	| LBRACES field_list statement_list RBRACES
	;
	
statement_list ::= statement
                | statement_list statement
            ;	
	
statement ::= location ASSIGN expr SEMICOLON
	    | location PLUSASSIGN expr
	    | location SUBASSIGN expr
	    | method_call SEMICOLON
	    | IF LPAREN expr RPAREN statement
	    | IF LPAREN expr RPAREN statement ELSE statement
	    | FOR ID ASSIGN expr COMA statement
	    | WHILE expr statement
	    | RETURN SEMICOLON
	    | RETURN expr SEMICOLON
	    | BREAK SEMICOLON
	    | CONTINUE SEMICOLON
	    | SEMICOLON
	    | block
	    ;
	    
method_call ::= ID LPAREN RPAREN
	      |ID LPAREN expr_list RPAREN
	      |ID point_id_list LPAREN RPAREN
	      |ID point_id_list LPAREN expr_list RPAREN
	      ;
	      
      
expr_list ::= expr
            | expr_list COMA expr  
            ;	      

point_id_list ::= POINT ID
		| point_id_list POINT ID
		;

location ::= ID point_id_list LSQBRACKET expr RSQBRACKET 
	   | ID LSQBRACKET expr RSQBRACKET
	   | ID point_id_list
	   | ID
           ;  
           
expr ::= location
       | INTLIT
       | FLOATLIT
       | BOOLLIT
       | expr PLUS expr
       | expr SUB expr
       | expr MULT expr
       | expr DIV expr
       | expr MOD expr
       | expr LESS expr
       | expr GREATER expr
       | expr LESSEQUAL expr
       | expr GREATEREQUAL expr
       | expr EQUAL expr
       | expr NOTEQUAL expr
       | expr AND expr
       | expr OR expr
       | NOT expr 
       | LPAREN expr RPAREN
       ;

